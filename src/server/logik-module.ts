import {
    createDefaultModule, createDefaultSharedModule, DefaultSharedModuleContext, inject,
    Module, PartialLangiumServices
} from 'langium';
import ElkConstructor from 'elkjs/lib/elk.bundled';
import { DefaultElementFilter, ElkFactory, ElkLayoutEngine, IElementFilter, ILayoutConfigurator } from 'sprotty-elk/lib/elk-layout';
import { LogikGeneratedModule, LogikGeneratedSharedModule } from './language/module';
import { LogikValidator, registerValidationChecks } from './logik-validator';
import { LangiumSprottyServices, LangiumSprottySharedServices, SprottyDiagramServices, SprottySharedModule } from 'langium-sprotty';
import { LogikLayoutConfigurator } from './layout-config';
import { LogikDiagramGenerator } from './diagram-generator';


/**
 * Declaration of custom services - add your own service classes here.
 */
export type LogikAddedServices = {
    validation: {
        LogikValidator: LogikValidator
    }, 
    layout: {
        ElkFactory: ElkFactory,
        ElementFilter: IElementFilter,
        LayoutConfigurator: ILayoutConfigurator
    }
}

/**
 * Union of Langium default services and your custom services - use this as constructor parameter
 * of custom service classes.
 */
export type LogikServices = LangiumSprottyServices & LogikAddedServices

/**
 * Dependency injection module that overrides Langium default services and contributes the
 * declared custom services. The Langium defaults can be partially specified to override only
 * selected services, while the custom services must be fully specified.
 */
export const LogikModule: Module<LogikServices, PartialLangiumServices & SprottyDiagramServices & LogikAddedServices> = {
    layout: {
        ElkFactory: () => () => new ElkConstructor({ algorithms: ['layered'], workerUrl: './elk-worker.min.js', workerFactory: (url?:string) => new Worker('./elk-worker.min.js')}),
        ElementFilter: () => new DefaultElementFilter(),
        LayoutConfigurator: () => new LogikLayoutConfigurator()
    },
    diagram: {
        DiagramGenerator: services => new LogikDiagramGenerator(services),
        ModelLayoutEngine: services => new ElkLayoutEngine(services.layout.ElkFactory, services.layout.ElementFilter, services.layout.LayoutConfigurator) as any
    },
    validation: {
        LogikValidator: () => new LogikValidator()
    }
};

/**
 * Create the full set of services required by Langium.
 *
 * First inject the shared services by merging two modules:
 *  - Langium default shared services
 *  - Services generated by langium-cli
 *
 * Then inject the language-specific services by merging three modules:
 *  - Langium default language-specific services
 *  - Services generated by langium-cli
 *  - Services specified in this file
 *
 * @param context Optional module context with the LSP connection
 * @returns An object wrapping the shared services and the language-specific services
 */
export function createLogikServices(context: DefaultSharedModuleContext): {
    shared: LangiumSprottySharedServices,
    logik: LogikServices
} {
    const shared = inject(
        createDefaultSharedModule(context),
        LogikGeneratedSharedModule,
        SprottySharedModule
    );
    const logik = inject(
        createDefaultModule({ shared }),
        LogikGeneratedModule,
        LogikModule
    );
    // add our custom command handler to our 'shared' services
    shared.ServiceRegistry.register(logik);
    registerValidationChecks(logik);
    return { shared, logik };
}

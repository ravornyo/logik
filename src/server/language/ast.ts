/******************************************************************************
 * This file was generated by langium-cli 1.1.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/

/* eslint-disable */
import { AstNode, AbstractAstReflection, ReferenceInfo, TypeMetaData } from 'langium';

export type Expression = AndLogic | NotLogic | OrLogic | Variable;

export const Expression = 'Expression';

export function isExpression(item: unknown): item is Expression {
    return reflection.isInstance(item, Expression);
}

export interface AndLogic extends AstNode {
    readonly $container: AndLogic | NotLogic | OrLogic | Program | Variable;
    readonly $type: 'AndLogic';
    inputs: Array<Expression>
}

export const AndLogic = 'AndLogic';

export function isAndLogic(item: unknown): item is AndLogic {
    return reflection.isInstance(item, AndLogic);
}

export interface NotLogic extends AstNode {
    readonly $container: AndLogic | NotLogic | OrLogic | Program | Variable;
    readonly $type: 'NotLogic';
    input?: Expression | Variable
}

export const NotLogic = 'NotLogic';

export function isNotLogic(item: unknown): item is NotLogic {
    return reflection.isInstance(item, NotLogic);
}

export interface OrLogic extends AstNode {
    readonly $container: AndLogic | NotLogic | OrLogic | Program | Variable;
    readonly $type: 'OrLogic';
    inputs: Array<Expression>
}

export const OrLogic = 'OrLogic';

export function isOrLogic(item: unknown): item is OrLogic {
    return reflection.isInstance(item, OrLogic);
}

export interface Program extends AstNode {
    readonly $type: 'Program';
    variables: Array<Variable>
}

export const Program = 'Program';

export function isProgram(item: unknown): item is Program {
    return reflection.isInstance(item, Program);
}

export interface Variable extends AstNode {
    readonly $container: AndLogic | NotLogic | OrLogic | Program | Variable;
    readonly $type: 'Variable';
    expression?: Expression
    name: string
}

export const Variable = 'Variable';

export function isVariable(item: unknown): item is Variable {
    return reflection.isInstance(item, Variable);
}

export interface LogikAstType {
    AndLogic: AndLogic
    Expression: Expression
    NotLogic: NotLogic
    OrLogic: OrLogic
    Program: Program
    Variable: Variable
}

export class LogikAstReflection extends AbstractAstReflection {

    getAllTypes(): string[] {
        return ['AndLogic', 'Expression', 'NotLogic', 'OrLogic', 'Program', 'Variable'];
    }

    protected override computeIsSubtype(subtype: string, supertype: string): boolean {
        switch (subtype) {
            case AndLogic:
            case NotLogic:
            case OrLogic:
            case Variable: {
                return this.isSubtype(Expression, supertype);
            }
            default: {
                return false;
            }
        }
    }

    getReferenceType(refInfo: ReferenceInfo): string {
        const referenceId = `${refInfo.container.$type}:${refInfo.property}`;
        switch (referenceId) {
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }

    getTypeMetaData(type: string): TypeMetaData {
        switch (type) {
            case 'AndLogic': {
                return {
                    name: 'AndLogic',
                    mandatory: [
                        { name: 'inputs', type: 'array' }
                    ]
                };
            }
            case 'OrLogic': {
                return {
                    name: 'OrLogic',
                    mandatory: [
                        { name: 'inputs', type: 'array' }
                    ]
                };
            }
            case 'Program': {
                return {
                    name: 'Program',
                    mandatory: [
                        { name: 'variables', type: 'array' }
                    ]
                };
            }
            default: {
                return {
                    name: type,
                    mandatory: []
                };
            }
        }
    }
}

export const reflection = new LogikAstReflection();
